{
    "collab_server" : "",
    "contents" : "---\ntitle: Exercise - The 5 verbs of dplyr\nauthor: Ben\ndate: '2017-09-23'\nslug: the-5-verbs-of-dplyr-exercise\ncategories: []\ntags: []\noutput: \n  github_document:\n    toc: true\n---\n\n# Getting started\n\nAs always, the first thing we will do is load the tidyverse. \n\n_Note: If you haven't yet installed the tidyverse, you'll first have to run the code install.packages(\"tidyverse\")._\n\n```{r message = FALSE}\nlibrary(tidyverse)\n```\n\nHere's the dataframe that we'll analyze in this exercise:\n\n```{r}\nscores <- data_frame(name = c(\"mike\", \"carol\", \"greg\", \"marcia\", \"peter\", \"jan\", \"bobby\", \"cindy\", \"alice\"),\n           school = c(\"south\", \"south\", \"south\", \"south\", \"north\", \"north\", \"north\", \"south\", \"south\"),\n           teacher = c(\"johnson\", \"johnson\", \"johnson\", \"johnson\",  \"smith\", \"smith\", \"smith\", \"perry\", \"perry\"),\n           gender = c(\"male\", \"female\", \"male\", \"female\", \"male\", \"female\", \"male\", \"female\", \"female\"),\n           math_score = c(4, 3, 2, 4, 3, 4, 5, 4, 5),\n           reading_score = c(1, 5, 2, 4, 5, 4, 1, 5, 4)) \n```\n\nLet's first take a look at it:\n\n```{r}\nscores\n```\n\nBefore we get started, I want to make sure you understand the difference between doing something and assigning it to a new name and just doing it without naming it. For example, make sure you understand the following:\n\n```{r}\n# get the first 3 rows\nscores %>% \n  slice(1:3)\n\n# get the first 3 rows, and assign it to a new name \"scores_small\"\nscores_small <- scores %>% \n  slice(1:3)\n\n# see what's in \"scores_small\"\nscores_small\n```\n\nIn this exercise we'll typically just print the results and not save them, but it's an option if you want it! \n\nNow we can get to the exercise. Most sections will begin with an example for you to look at. When questions require a written answer, there will be an \"Answer\" line for you to complete.\n\n# Arrange\n\n## Example\n\n**Question:** Sort the data by math_score from high to low. Who had the best math score?   \n\n```{r}\nscores %>% \n  arrange(desc(math_score))\n```\n\n**Answer:** Bobby and alice both tied for the highest math score\n\n## Q1\n\n**Question:** Sort the data by name from first to last in the alphabet.\n\n```{r}\n\n```\n\n## Q2\n\n**Question:** Sort the data by gender so females show up first. Which gender appears to have better reading scores?   \n\n```{r}\n\n```\n\n**Answer:** \n\n## Q3\n\n**Question:** Sort the data by school, then teacher, then gender, then math_score, and finally by reading_score. \n\n```{r}\n\n```\n\n# Select\n\n## Example\n\n**Question:** Select only the name, math_score, and reading_score columns.\n\n```{r}\nscores %>% \n  select(name, math_score, reading_score)\n```\n\n## Q1 \n\n**Question:** Select all of the columns except the gender column.  \n\n```{r}\n\n```\n\n## Q2 \n\n**Question:** Select all of the columns except the math_score and reading_score columns.\n\n```{r}\n\n```\n\n## Q3 \n\n**Question:** Keep all of the columns but rearrange them so gender is the first column.\n\n```{r}\n\n```\n\n# Filter\n\n## Example\n\n**Question:** Filter to students who are male and went to south.\n\n```{r}\n# Option 1\nscores %>% \n  filter(gender == \"male\" & school == \"south\")\n\n# Option 2\nscores %>% \n  filter(gender == \"male\", school == \"south\")\n```\n\n## Q1\n\n**Question:** Filter to students who did well in math (you decide what \"well\" means).\n\n```{r}\n\n```\n\n## Q2\n\n**Question:** Use filter to figure out how many students had a math score of 4 or more and a reading score of 3 or more. \n\n```{r}\n\n```\n\n**Answer:**\n\n## Q3\n\n**Question:** Explain the errors in each of the following code blocks, then fix it to make it right! \n\n```{r error = TRUE}\n# code block 1\nscores %>% \n  filter(school == south)\n\n# code block 2\nscores %>% \n  filter(school = \"south\")\n\n# fix it! \n\n\n```\n\n**Answer:** \n\n## Q4\n\n**Question:** You are creating a remediation program. Filter to students who got a 3 or worse in either math or reading.\n\n```{r}\n\n```\n\n## Q5\n\n**Question:** Filter to students who got a reading score of 2, 3, or 4.\n\n```{r}\n\n```\n\n## Challenge\n\n**Question:** Filter to students who have a name that starts with an \"m\". Hint: type \"?substr\" in the console and then scroll to the bottom of the help file to see useful examples.\n\n```{r}\n\n```\n\n# Filter with groups\n\n## Example\n\n**Question:** Filter to teachers whose best math student got a score of 5.\n\n```{r}\nscores %>% \n  group_by(teacher) %>% \n  filter(max(math_score) == 5)\n```\n\n## Q1\n\n**Question:** Filter to the gender with a mean math score of 4.   \n\n```{r}\n\n```\n\n## Q2\n\n**Question:** Explain why the following code removes students who have perry as their teacher.  \n\n```{r}\n\n```\n\n**Answer:** \n\n# Mutate\n\n## Example\n\n**Question:** Both the math and reading scores were actually out of 50 -- replace both variables to be 10 times their original values.\n\n```{r}\nscores %>% \n  mutate(math_score =  math_score * 10,\n         reading_score = reading_score * 10)\n```\n\n## Q1\n\n**Question:** Create a new column called \"math_reading_avg\" which is the average of a students math and reading scores.\n\n```{r}\n\n```\n\n## Q2 \n\n**Question:** Create a new column \"high_math_achiever\" that is an indicator of if a student got a 4 or better on their math_score.\n\n```{r}\n\n```\n\n## Q3 \n\n**Question:** Create a new column \"reading_score_centered\" that is a students reading score with the mean of all students' reading scores subtracted from it.\n\n```{r}\n\n```\n\n## Q4 \n\n**Question:** Create a new column \"science_score\". You can make up what the actual scores are!\n\n```{r}\n\n```\n\n# Mutate with groups\n\n## Q1\n\n**Question:** Mike and cindy both got a 4 for their math score. Explain why why Mike has a higher \"math_score_centered_by_gender\" score.\n\n```{r}\nscores %>% \n  group_by(gender) %>% \n  mutate(math_score_centered_by_gender = math_score - mean(math_score))\n```\n\n**Answer:** \n\n## Q2\n\n**Question:** Create a \"reading_score_centered_by_teacher\" column. What can you learn from it?\n\n```{r}\n\n```\n\n**Answer:** \n\n## Q3\n\n**Question:** Make a \"number_of_students_in_class\" column that is number of students in a student's class. For example, it should be 4 for mike and 3 for peter.\n\n```{r}\n\n```\n\n# Summarize\n\n## Example\n\n**Question:** Use the summarize command to find the mean math score for all students.\n\n```{r}\nscores %>% \n  summarize(math_score_mean = mean(math_score))\n```\n\n## Q1\n\n**Question:** Use the summarize command to find the mean reading score for all students.\n\n```{r}\n\n```\n\n## Q2\n\n**Question:** Use the summarize command to find the median for both math scores and reading scores.\n\n```{r}\n\n```\n\n## Q3\n\n**Question:** Look closely at the following code. Why is it throwing an error? How can Rstudio help you see this error?\n\n```{r}\n\n```\n\n**Answer:** We need another \")\" at the end of the code. The first \")\" is for the min function but we also need a \")\" to end the summarize function. Rstudio helps because if you go to the right of a paranthese, it highlights the corresponding closing paranthese. \n\n# Summarize with groups\n\n## Example\n\n**Question:** Find the minimum math score for each school.\n\n```{r}\nscores %>% \n  group_by(school) %>% \n  summarize(min_math_score = min(math_score))\n```\n\n## Q1 \n\n**Question:** Find the maximum math score for each teacher.\n\n```{r}\n\n```\n\n## Q2\n\n**Question:** If we grouped by gender, and then summarized with the minimum reading score, how many rows would the resulting data frame have?\n\n**Answer:** \n\n## Q3\n\n**Question:** Remember that mutate always keeps the same number of rows but summarize usually reduces the number of rows. Why doesn't the following use of summarize reduce the number of rows?\n\n```{r}\n\n```\n\n**Answer:** \n\n## Q4 \n\n**Question:** Create a data frame with the mean and median reading score by gender, as well as the number of students of that gender.\n\n```{r}\n\n```\n\n# Combining verbs\n\n## Example\n\n**Question:** Select just the name and math_score columns. Then create a new column \"math_score_ec\" that is a students math score plus 5 extra credit points. Finally, arrange the data frame by math_score_ec from low to high.\n\n```{r}\nscores %>% \n  select(name, math_score) %>% \n  mutate(math_score_ec = math_score + 5) %>% \n  arrange(math_score_ec)\n```\n\n## Q1 \n\n**Question:** Select every column except the teacher column. Create a new variabled called \"mean_score\" that is the mean of a student's math and reading score. Finally, arrange the data frame by mean_score from low to high.\n\n```{r}\n\n```\n\n## Q2 \n\n**Question:** Remove any students with smith as a teacher, then find the mean math_score by gender.\n\n```{r}\n\n```\n\n## Q3\n\n**Question:** Find the min, max, and median reading_score for female students at south school.\n\n```{r}\n\n```\n\n## Q4\n\n**Question:** Inspect each of the following code blocks. They both do about the same thing. Which one do you think is preffered from a computer efficiency standpoint?\n\n```{r}\n# code block 1\nscores %>% \n  group_by(school, teacher) %>% \n  summarize(max_math_score = max(math_score)) %>% \n  filter(school == \"south\")\n\n# code block 2\nscores %>% \n  filter(school == \"south\") %>% \n  group_by(teacher) %>% \n  summarize(max_math_score = max(math_score))\n```\n\n**Answer:** \n\n## Challenge\n\nPlay around with these tools. Write a question or two that you think best exposes a misunderstanding you had or drills down on an important thing to remember. I'd love to add these questions in the future! Feel free to email what you came up with to stenhaug@stanford.edu.",
    "created" : 1509141214818.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1668802869",
    "id" : "97636C0F",
    "lastKnownWriteTime" : 1509142396,
    "last_content_update" : 1509142396702,
    "path" : "~/Google Drive/Projects/Data Science Tutoring/githubr_curriculum/the-5-verbs-of-dplyr-exercise.Rmd",
    "project_path" : "the-5-verbs-of-dplyr-exercise.Rmd",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_markdown"
}